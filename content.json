{"meta":{"title":"coldcafe's blog","subtitle":null,"description":null,"author":"coldcafe","url":"https://coldcafe.github.io"},"pages":[],"posts":[{"title":"使用microk8s搭建单机k8s环境踩过的坑","slug":"使用microk8s搭建单机k8s环境踩过的坑","date":"2019-07-10T10:47:00.856Z","updated":"2019-07-12T06:16:29.320Z","comments":true,"path":"2019/07/10/使用microk8s搭建单机k8s环境踩过的坑/","link":"","permalink":"https://coldcafe.github.io/2019/07/10/使用microk8s搭建单机k8s环境踩过的坑/","excerpt":"","text":"环境阿里云国内 ubuntu18.04，因为k8s的镜像在k8s.gcr.io下，这个地址指向的是谷歌的服务器，所以被墙了，国内无法正常访问此仓库。而且microk8s版本更新，导致目前网上找到的方法无效，是针对老版本的，目前我使用的是v1.15.0。 安装步骤 安装microk8s 12apt install snapdsnap install microk8s --classic 查看microk8s状态 1microk8s.status 在这里你可以看到插件的安装情况 microk8s.kubectl重命名为kubectl1snap alias microk8s.kubectl kubectl 以上为正常的安装步骤，请参考官网 https://microk8s.io/docs/ 给microk8s配梯子 安装ss 12apt-get install python-pippip install git+https://github.com/shadowsocks/shadowsocks.git@master 连接梯子 1nohup sslocal -s (ip) -p (port) -k (password) &amp; 设置microk8s通过梯子拉取镜像。编辑 /var/snap/microk8s/current/args/containerd-env 123456789101112131415161718# To start containerd behind a proxy you need to add an HTTPS_PROXY# environment variable in this file. HTTPS_PROXY is of the following form:# HTTPS_PROXY=http://username:password@proxy:port/# where username: and password@ are optional. eg:#HTTPS_PROXY=socks5://127.0.0.1:1080### Remember to restart the containerd daemon after editing this file:## sudo systemctl restart snap.microk8s.daemon-containerd.service### Attempt to change the maximum number of open file descriptors# this get inherited to the running containers#ulimit -n 65536 || true 这里注意，之前版本是修改 /var/snap/microk8s/current/args/dockerd-env，新版本有已经没有这个文件了。目前我安装的microk8s版本是v1.15.0，不排除可能在以后的版本发生变化。 重启启动daemon-containerd服务1sudo systemctl restart snap.microk8s.daemon-containerd.service","categories":[],"tags":[]},{"title":"使用NODE写爬虫，抓取搜狗词库","slug":"使用NODE写爬虫，抓取搜狗词库","date":"2019-06-11T02:06:21.373Z","updated":"2019-07-12T07:11:06.291Z","comments":true,"path":"2019/06/11/使用NODE写爬虫，抓取搜狗词库/","link":"","permalink":"https://coldcafe.github.io/2019/06/11/使用NODE写爬虫，抓取搜狗词库/","excerpt":"","text":"使用到的库 cheerio (俗称node版的JQuery) axios (网络请求库) 获取所有词库列表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import * as cheerio from &apos;cheerio&apos;;import axios from &apos;axios&apos;;const host = &apos;https://pinyin.sogou.com&apos;;export async function getLexicons() &#123; console.info(&apos;开始爬取搜狗词库列表...&apos;); const startTime = new Date(); const result = []; let $ = await getPage(&apos;/dict/cate/index&apos;); const cateUrls = []; $(&apos;.nav_list a&apos;).each((idx, ele) =&gt; cateUrls.push($(ele).attr(&apos;href&apos;))); for (let pageUrl of cateUrls) &#123; const cateId = pageUrl.split(&apos;/cate/index/&apos;)[1].split(&apos;?&apos;)[0]; while (pageUrl) &#123; $ = await getPage(pageUrl); $(&apos;.dict_detail_block&apos;).each((idx, ele) =&gt; &#123; const titleEle = $(ele).children(&apos;.dict_detail_title_block&apos;).first().children().first().children().first(); const name = $(titleEle).text(); const hrefSplit = $(titleEle).attr(&apos;href&apos;).split(&apos;/&apos;); const cid = hrefSplit[hrefSplit.length - 1]; const updateTime = $(ele).children(&apos;.dict_detail_show&apos;).first().children().first().children().last().text(); result.push(&#123; cid, name, cateId, version: updateTime, &#125;); &#125;); $(&apos;#dict_page_list ul li span a&apos;).each((idx, ele) =&gt; &#123; if (($(ele).text() === &apos;下一页&apos;)) &#123; pageUrl = $(ele).attr(&apos;href&apos;); &#125; else &#123; pageUrl = null; &#125; &#125;); &#125; &#125; console.info(`爬取搜狗词库列表完成，共$&#123;result.length&#125;条，耗时 $&#123;new Date().getTime() - startTime.getTime()&#125;ms`); return result;&#125;async function getPage(url: string): Promise&lt;CheerioStatic&gt; &#123; try &#123; const res = await axios.get(host + url); return cheerio.load(res.data); &#125; catch (error) &#123; console.warn(error.message); console.info(&apos;重试中...&apos;); return getPage(url); &#125;&#125; 下载并解析词库文件 使用SCEL包解析搜狗词库1git@github.com:coldcafe/SCEL.git 获取词库中的所有词12345678910111213141516171819async getWords(id: string, name: string): Promise&lt;any[]&gt; &#123; console.time(&apos;加载词库&apos;); const url = `http://download.pinyin.sogou.com/dict/download_cell.php?id=$&#123;d&#125;&amp;name=$&#123;name&#125;`; return new Promise((resolve, reject) =&gt; &#123; try &#123; http.get(encodeURI(url), res =&gt; &#123; const data = []; res.on(&apos;data&apos;, [].push.bind(data)).on(&apos;end&apos;, () =&gt; &#123; const buf = Buffer.concat(data); const dict = SCEL.parseBuffer(buf); console.timeEnd(&apos;加载词库&apos;); resolve(dict.words); &#125;); &#125;); &#125; catch (error) &#123; reject(error); &#125; &#125;);&#125;","categories":[],"tags":[]},{"title":"MAC系统下vscode搭建java开发环境","slug":"MAC系统下vscode搭建java开发环境","date":"2019-01-23T01:42:22.427Z","updated":"2019-01-23T03:21:19.742Z","comments":true,"path":"2019/01/23/MAC系统下vscode搭建java开发环境/","link":"","permalink":"https://coldcafe.github.io/2019/01/23/MAC系统下vscode搭建java开发环境/","excerpt":"","text":"安装jdk 1.8。 安装maven，直接使用Homebrew安装。 1brew install maven 安装vscode，以及相关插件。 Language Support for Java(TM) by Red Hat Debugger for Java Maven for Java Java Test Runner maven配置私服。MAC系统，maven的仓库目录默认在~/.m2下。maven配置，我们需要在~/.m2下添加settings.xml文件。示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt; &lt;localRepository&gt;你的本地仓库地址(~/.m2/repository)&lt;/localRepository&gt; &lt;pluginGroups&gt; &lt;/pluginGroups&gt; &lt;proxies&gt; &lt;/proxies&gt; &lt;servers&gt; &lt;server&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;username&gt;********&lt;/username&gt; &lt;password&gt;********&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;maven-public&lt;/name&gt; &lt;url&gt;你的私有仓库URL&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;jdk&gt;1.8&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;local private nexus&lt;/name&gt; &lt;url&gt;你的私有仓库URL&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;releases&lt;/id&gt; &lt;name&gt;local private nexus&lt;/name&gt; &lt;url&gt;你的私有仓库URL&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;nexus&lt;/activeProfile&gt; &lt;/activeProfiles&gt;&lt;/settings&gt; java应用日志输出调成使用terminal输出。(根据个人喜好设置)修改项目的.vscode目录下的launch.json文件，添加 “console”: “integratedTerminal”。示例 123456789101112131415&#123; \"configurations\": [ &#123; \"type\": \"java\", \"name\": \"CodeLens (Launch) - Application\", \"request\": \"launch\", \"mainClass\": \"com.***.Application\", \"projectName\": \"saas\", \"console\": \"integratedTerminal\", \"env\": &#123; \"SAAS_ENV\": \"DEV\" &#125; &#125; ]&#125; 现在开始你的JAVA编程之旅吧！","categories":[],"tags":[]},{"title":"用python写出动听的歌声","slug":"用python写出动听的歌声","date":"2018-11-27T07:52:46.560Z","updated":"2018-11-30T10:55:05.453Z","comments":true,"path":"2018/11/27/用python写出动听的歌声/","link":"","permalink":"https://coldcafe.github.io/2018/11/27/用python写出动听的歌声/","excerpt":"","text":"准备 一首歌的谱子 所有要用到音阶的声音频率 python环境 行动 首先我们需要一个生成正弦波的函数 1234567891011121314151617def wv(t=0,f=0,v=0.5,wf=ff,sr=8000): ''' t:写入时长 f:声音频率 v：音量 wf：一个可以写入的音频文件 sr：采样率 ''' tt=0 dt=1.0/sr while tt&lt;=t: s=math.sin(tt*math.pi*f)*v*(2**15)#采样，调节音量，映射到[-2^15,2^15) s=int(s) fd=struct.pack(\"h\",s)#转换成8bit二进制数据 wf.writeframes(fd)#写入音频文件 tt+=dt#时间流逝 然后我们准备好简谱，然后翻译成对应的声音频率 12345678910111213141516# 使用到的音阶的频率note=&#123;\"1\":262,\"2\":294,\"3\":330,\"4\":349,\"5\":392,\"6\":440,\"7\":494,\"6-\":220,\"0\":0&#125;# 简谱n=[ \"1\",\"2\",\"3\",\"1\",\"1\",\"2\",\"3\",\"1\",\"0\", \"3\",\"4\",\"5\",\"0\",\"3\",\"4\",\"5\",\"0\", \"5\",\"6\",\"5\",\"4\",\"3\",\"1\",\"0\",\"5\",\"6\",\"5\",\"4\",\"3\",\"1\",\"0\", \"2\",\"6-\",\"1\",\"0\",\"2\",\"6-\",\"1\"]# 音长tm=[ 2,2,2,2,2,2,2,2,1, 2,2,2,1.5,2,2,2,2, 1,1,1,1,2,2,1,1,1,1,1,1,2,1, 2,2,2,2,2,2,2] 执行 12345678910111213141516#!/usr/bin/python# -*- coding: UTF-8 -*-import waveimport mathimport structimport matplotlib.pyplot as pltimport numpy as npff=wave.open(\"v1.wav\",\"w\")ff.setframerate(8000)ff.setnchannels(1)ff.setsampwidth(2)for i in range(len(n)): wv(tm[i]/4.0,note[n[i]])ff.close()","categories":[],"tags":[]},{"title":"使用python计算各音阶频率","slug":"使用python计算各音阶频率","date":"2018-11-20T09:51:53.000Z","updated":"2018-11-20T14:41:54.000Z","comments":true,"path":"2018/11/20/使用python计算各音阶频率/","link":"","permalink":"https://coldcafe.github.io/2018/11/20/使用python计算各音阶频率/","excerpt":"","text":"准备基本的乐理知识首先，我们要知道十二平均律。十二平均律是音乐中最底层的系统，规定了两个单音的相对音高，就像计算机中的二进制系统规定了各种运算方式一样。简单来讲，十二平均律体系将一个“纯八度”分成12份，每份称为1个半音，两份为1个全音，以此定出所有中间的单音。 其次是我们要计算的音阶 CDEFGAB，也就是对应我们常说的 do re mi fa so la si。 那他们之间的应对关系如下图所示： 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 5 5.5 6 纯八度 小二度 大二度 小三度 大三度 纯四度 三全音 纯五度 小六度 大六度 小七度 大七度 纯八度 C #C D #D E F #F G #G A #A B C do re mi fa so la si do 每两个相邻的单音之间是等比关系，比例是 $$2^\\frac{1}{12}$$国际标准的A4音的频率为440Hz,根据这个频率我们就可以计算出其他的音阶了。 行动废话不多说，show me your code1234567891011121314151617181920#!/usr/bin/python# -*- coding: UTF-8 -*-import mathA3=220_A3=A3*2**(1.0/12.0)B3=A3*2**(2.0/12.0)C4=A3*2**(3.0/12.0)_C4=A3*2**(4.0/12.0)D4=A3*2**(5.0/12.0)_D4=A3*2**(6.0/12.0)E4=A3*2**(7.0/12.0)F4=A3*2**(8.0/12.0)_F4=A3*2**(9.0/12.0)G4=A3*2**(10.0/12.0)_G4=A3*2**(11.0/12.0)A4=440_A4=A4*2**(1.0/12.0)B4=A4*2**(2.0/12.0)print C4, D4, E4, F4, G4, A4, B4 输出：1261.625565301 293.664767917 329.627556913 349.228231433 391.995435982 440 493.883301256","categories":[],"tags":[]}]}